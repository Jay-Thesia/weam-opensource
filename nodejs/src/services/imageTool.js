const { Tool } = require('@langchain/core/tools');

/**
 * Custom DALL-E image generation tool that extends LangChain Tool class
 */
class CustomDallETool extends Tool {
    constructor(config = {}) {
        const {
            n = 1,
            model = 'dall-e-3',
            apiKey,
            size = '1024x1024',
            quality = 'standard'
        } = config;

        // Validate required parameters
        if (!apiKey) {
            throw new Error('OpenAI API key is required');
        }

        super();
        
        this.n = n;
        this.model = model;
        this.apiKey = apiKey;
        this.size = size;
        this.quality = quality;
        this.name = 'dalle_api_wrapper';
        this.description = `An image generation tool that creates high-quality images from text descriptions using OpenAI's DALL-E 3 model. The tool automatically uploads generated images to S3 storage and returns S3 URLs for immediate display. Tool supports various image sizes and aspect ratios, including 1024x1024 for Square images, 1024x1536 for Portrait images and 1536x1024 for Landscape images.
        1024x1024 (Square): Ideal for social media posts, profile pictures, digital artwork, and product images.
        1024x1536 (Portrait): Perfect for mobile content, social media stories, and vertical ads.
        1536x1024 (Landscape): Great for presentations, video thumbnails, website banners, and widescreen displays.
        IMPORTANT: This tool automatically handles S3 uploads and returns S3 URLs for better user experience. DO NOT use this tool if the user requests to generate code based on an image input and a prompt. For such cases, use the chat tool to generate code from the image and prompt.`;
        
        // Define the tool schema for function calling
        this.schema = {
            type: 'object',
            properties: {
                query: {
                    type: 'string',
                    description: 'Text prompt describing the image to generate'
                },
                prompt: {
                    type: 'string',
                    description: 'Alternative text prompt (alias for query)'
                },
                text: {
                    type: 'string',
                    description: 'Alternative text prompt (alias for query)'
                },
                apiKey: {
                    type: 'string',
                    description: 'Optional API key override (if not provided, uses default)'
                }
            },
            required: ['query']
        };
    }

    /**
     * LangChain calls _call() under the hood
     * @param {string|Object} input - Text prompt for image generation or object with query
     * @returns {Promise<string>} - Markdown formatted image result
     */
    async _call(input) {
        try {
            // Extract query from input (could be string or object)
            let query;
            if (typeof input === 'string') {
                query = input;
            } else if (input && typeof input === 'object') {
                query = input.query || input.prompt || input.text || '';
            } else {
                throw new Error('Invalid input provided to DALL-E tool');
            }
            
            if (!query) {
                throw new Error('Query/prompt is required for image generation');
            }
            
            // Generate image with DALL-E
            
            // Import OpenAI client
            const { OpenAI } = require('openai');
            const openaiClient = new OpenAI({
                apiKey: this.apiKey
            });
            
            // Generate image using OpenAI client
            const response = await openaiClient.images.generate({
                prompt: query,
                n: this.n,
                size: this.size,
                model: this.model,
                quality: this.quality,
            });

            if (!response.data || response.data.length === 0) {
                throw new Error('No image generated by DALL-E');
            }

            const imageUrl = response.data[0].url;
            // DALL-E image generated successfully
            
            try {
                // Try to upload to S3
                const { uploadOpenAIImageToS3 } = require('./uploadFile');
                const uploadResult = await uploadOpenAIImageToS3(imageUrl, {
                    customFileName: `dalle-${Date.now()}`,
                    userId: 'system',
                    brainId: 'system'
                });

                if (uploadResult.success) {
                    // Return S3 URL in markdown format
                    const s3Result = `![${query}](${uploadResult.s3Url})`;
                    return s3Result;
                    
                } else {
                    // Fallback to OpenAI URL if S3 upload fails
                    return `![${query}](${imageUrl})`;
                }
            } catch (uploadError) {
                // Fallback to OpenAI URL if S3 upload fails with error
                return `![${query}](${imageUrl})`;
            }

        } catch (error) {
            console.error('❌ Error in CustomDallETool:', error);
            throw new Error(`Image generation failed: ${error.message}`);
        }
    }

    /**
     * Run method for compatibility with other tool interfaces
     * @param {Object|string} args - Arguments object or direct query string
     * @returns {Promise<Object>} - Result object with type and content
     */
    async run(args) {
        try {
            let query;
            
            if (typeof args === 'string') {
                // Direct string input
                query = args;
            } else if (args && typeof args === 'object') {
                // Object input - check for dynamic API key
                query = args.query || args.prompt || args.text || '';
                
                // If dynamic API key is provided, temporarily override
                if (args.apiKey) {
                    const originalApiKey = this.apiKey;
                    this.apiKey = args.apiKey;
                    const result = await this._call(query);
                    this.apiKey = originalApiKey; // Restore original API key
                    return {
                        type: 'text',
                        content: result
                    };
                }
            } else {
                throw new Error('Invalid arguments provided to DALL-E tool');
            }
            
            if (!query) {
                throw new Error('Query/prompt is required for image generation');
            }

            const result = await this._call(query);
            return {
                type: 'text',
                content: result
            };

        } catch (error) {
            console.error('❌ Error in CustomDallETool run method:', error);
            throw new Error(`Image generation failed: ${error.message}`);
        }
    }

    /**
     * Invoke method for compatibility with LangChain
     * @param {Object} args - Arguments object
     * @returns {Promise<Object>} - Result object
     */
    async invoke(args) {
        return this.run(args);
    }
}

/**
 * Create a DALL-E image generation tool with default configuration
 * @param {string} apiKey - OpenAI API key
 * @returns {CustomDallETool} - Configured DALL-E tool instance
 */
function createDallEImageTool(apiKey) {
    return new CustomDallETool({
        n: 1,
        model: 'dall-e-3',
        apiKey: apiKey,
        size: '1024x1024',
        quality: 'standard'
    });
}

module.exports = {
    CustomDallETool,
    createDallEImageTool
};
