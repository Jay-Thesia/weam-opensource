const { Tool } = require('@langchain/core/tools');
const { GoogleGenerativeAI } = require('@google/generative-ai');
const { uploadGeminiImageToS3 } = require('./uploadFile');

/**
 * Enhanced Gemini image generation and editing tool that extends LangChain Tool class
 * Uses Google's Gemini 2.5 Flash Image (nano-banana) model for advanced image operations
 */
class CustomGeminiImageTool extends Tool {
    constructor(config = {}) {
        const {
            apiKey,
            model = 'gemini-2.5-flash-image-preview'
        } = config;

        super();
        this.apiKey = apiKey;
        this.model = model;
        this.name = 'gemini_image_generator';
        this.description = `Image generation tool powered by Google's Gemini 2.5 Flash Image model aka Nano Banana. This tool creates high-quality, photorealistic images from text descriptions using Gemini's NanoBanana model. The tool automatically uploads generated images to S3 storage and returns S3 URLs for immediate display.
        Usage Patterns:
        - Image Generation: "Create a photorealistic portrait of...", "Generate an image showing..."
        - Style Operations: "Create in watercolor style...", "Make it look futuristic..."
        - Scene Creation: "Show a landscape with...", "Create an interior scene..."
        IMPORTANT: Always call this tool for image generation query, do not consider the message history. This tool automatically handles S3 uploads and returns S3 URLs for better user experience. Always use the S3 url returned from this tool in your output for displaying the generated image. DO NOT use this tool if the user requests to generate code based on an image input and a prompt. For such cases, use the chat tool to generate code from the image and prompt.`;

        // Define the tool schema for function calling
        this.schema = {
            type: 'object',
            properties: {
                query: {
                    type: 'string',
                    description: 'Text prompt describing the image to generate'
                },
                prompt: {
                    type: 'string',
                    description: 'Alternative text prompt (alias for query)'
                },
                text: {
                    type: 'string',
                    description: 'Alternative text prompt (alias for query)'
                },
                apiKey: {
                    type: 'string',
                    description: 'Optional API key override (if not provided, uses default)'
                }
            },
            required: ['query']
        };
    }

    /**
     * LangChain calls _call() under the hood
     * @param {string|Object} input - Text prompt for image generation or object with query
     * @returns {Promise<string>} - Markdown formatted image result
     */
    async _call(input) {
        try {
            
            // Extract parameters from input (could be string or object)
            let query;
            if (typeof input === 'string') {
                query = input;
            } else if (input && typeof input === 'object') {
                query = input.query || input.prompt || input.text || '';
            } else {
                throw new Error('Invalid input provided to Gemini image tool');
            }
            
            if (!query) {
                throw new Error('Query/prompt is required for image generation');
            }
            
            const key = input && typeof input === 'object' && input.apiKey ? input.apiKey : this.apiKey;
            if (!key) {
                throw new Error('OpenAI API key is required. Please provide it in the request payload.');
            }
            const genAI = new GoogleGenerativeAI(key);
                        
            const model = genAI.getGenerativeModel({ model: this.model });
            
            // Regular generation
            const contentParts = [{ text: query }];
            
            const response = await model.generateContent(contentParts);
            
            if (!response.response || !response.response.candidates || response.response.candidates.length === 0) {
                throw new Error('No image generated by Gemini');
            }

            const candidate = response.response.candidates[0];
            if (!candidate.content || !candidate.content.parts || candidate.content.parts.length === 0) {
                throw new Error('No content parts in Gemini response');
            }

            // Find the image part in the response
            let imageData = null;
            let textResponse = '';
            
            for (const part of candidate.content.parts) {
                if (part.text) {
                    textResponse += part.text;
                } else if (part.inlineData && part.inlineData.data) {
                    imageData = part.inlineData.data;
                    break;
                }
            }

            if (!imageData) {
                throw new Error('No image data found in Gemini response');
            }
            
            try {
                // Try to upload to S3 using the function from uploadFile.js
                const uploadResult = await uploadGeminiImageToS3(imageData, {
                    customFileName: `gemini-${Date.now()}`,
                });
                
                if (uploadResult.success) {
                    
                    // Return S3 URL in markdown format like imageTool.js
                    const s3Result = `![${query}](${uploadResult.s3Url})`;
                    return s3Result;
                    
                } else {
                    // Fallback to data URL if S3 upload fails
                    const dataUrl = `data:image/png;base64,${imageData}`;
                    return `![${query}](${dataUrl})`;
                }
                
            } catch (uploadError) {
                return null;
            }

        } catch (error) {            
            // Provide more specific error messages
            if (error.message.includes('API key')) {
                throw new Error('Gemini API key is invalid or missing. Please check your configuration.');
            } else if (error.message.includes('quota') || error.message.includes('limit')) {
                throw new Error('Gemini API quota exceeded. Please try again later.');
            } else if (error.message.includes('network') || error.message.includes('timeout')) {
                throw new Error('Network error occurred while generating image. Please try again.');
            } else {
                throw new Error(`Gemini image generation failed: ${error.message}`);
            }
        }
    }

    /**
     * Run method for compatibility with other tool interfaces
     * @param {Object|string} args - Arguments object or direct query string
     * @returns {Promise<Object>} - Result object with type and content
     */
    async run(args) {
        try {
            let query;
            
            if (typeof args === 'string') {
                // Direct string input
                query = args;
            } else if (args && typeof args === 'object') {
                // Object input - check for dynamic API key
                query = args.query || args.prompt || args.text || '';
                
                // If dynamic API key is provided, temporarily override
                if (args.apiKey) {
                    const originalApiKey = this.apiKey;
                    this.apiKey = args.apiKey;
                    const result = await this._call(query);
                    this.apiKey = originalApiKey;
                    return {
                        type: 'text',
                        content: result
                    };
                }
            } else {
                throw new Error('Invalid arguments provided to Gemini image tool');
            }
            
            if (!query) {
                throw new Error('Query/prompt is required for image generation');
            }

            const result = await this._call(query);
            return {
                type: 'text',
                content: result
            };

        } catch (error) {
            throw new Error(`Gemini image generation failed: ${error.message}`);
        }
    }

    /**
     * Invoke method for compatibility with LangChain
     * @param {Object} args - Arguments object
     * @returns {Promise<Object>} - Result object
     */
    async invoke(args) {
        return this.run(args);
    }
}

/**
 * Create a Gemini image generation tool with default configuration
 * @param {string} apiKey - Google AI API key
 * @returns {CustomGeminiImageTool} - Configured Gemini image tool instance
 */
function createGeminiImageTool(apiKey = null) {
    return new CustomGeminiImageTool({
        apiKey: apiKey,
        model: 'gemini-2.5-flash-image-preview'
    });
}

module.exports = {
    CustomGeminiImageTool,
    createGeminiImageTool
};